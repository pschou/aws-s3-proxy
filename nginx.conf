worker_processes     auto;
worker_rlimit_nofile 8192;

events {
  worker_connections  1024;
}

http {
  include    mime.types;
  default_type application/octet-stream;

  log_format   main '$remote_addr - $remote_user $upstream_cache_status [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log   logs/access.log  main;

  sendfile     on;                   # Disable capturing the file into buffer before sending
	sendfile_max_chunk 1m;             # Limit the amount of data trasferring in a sendfile call.
  tcp_nopush   on;                   # Optimize for packet size instead of smaller and more frequent (tcp_nodelay)
  underscores_in_headers        on;  # switch all hyphens to underscores in headers for $variable access
  server_names_hash_bucket_size 128; # this seems to be required for some vhosts

	# Setup a local cache for proxied entities
  proxy_cache_path /tmp keys_zone=BucketCache:10m loader_threshold=300 loader_files=200 max_size=100m use_temp_path=off;

  server { # simple load balancing
    listen          80;
    server_name     localhost;
    access_log      logs/localhost.log main;

    location / {
      proxy_pass http://host.docker.internal:8080; # This host name is set in the docker-compose.yml by the `extra_hosts` field.
      proxy_cache BucketCache;             # Define which cache to use for these proxy requests.
      proxy_cache_key   $uri$http_accept;  # How to ensure that the cached data hits a cache.
      proxy_cache_valid any 1m;            # This sets the cache retention period, how long until a resource is deemed expired.
      proxy_cache_min_uses 2;              # The minimum number of hits to a file before it is cached locally.  No need to waste IOPS for one offs.

      proxy_pass_request_headers off;       # Turn off all headers to the backend microservice, allow only the headers below
      proxy_set_header Accept $http_accept; # Accept, so requests for the JSON api will work
      proxy_set_header X-USER $client_groups;   # Use an external authentication engine to provide authorization
      proxy_set_header Checksum $http_checksum; # When an HTTP POST is done the request can be hash checked
      proxy_set_header Action $http_action;     # Enable PUT action headers, like Copy and Move
    }

    set $client_groups "1";  # Placeholder for external authentication
  }
}
